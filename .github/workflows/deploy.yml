name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Debug Secrets
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "=== Secrets 디버깅 ==="
          echo "EC2_HOST 길이: ${#EC2_HOST}"
          echo "EC2_USER 길이: ${#EC2_USER}"
          echo "EC2_HOST 첫 5글자: ${EC2_HOST:0:5}"
          echo "EC2_HOST 마지막 5글자: ${EC2_HOST: -5}"
          
          if [ -z "$EC2_HOST" ]; then
            echo "❌ EC2_HOST가 비어있습니다!"
            exit 1
          fi
          
          if [ -z "$EC2_USER" ]; then
            echo "❌ EC2_USER가 비어있습니다!"
            exit 1
          fi
          
          echo "✅ Secrets 값 존재함"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker 빌드 캐싱 추가
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/krafton_jungle10_team4:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Create .env.production
        run: |
          cat > .env.production << 'EOF'
          APP_NAME="FastAPI RAG Backend"
          APP_VERSION="1.0.0"
          DEBUG=false
          LOG_LEVEL=info
          HOST=0.0.0.0
          PORT=8001
          WORKERS=4
          CHROMA_HOST=chromadb
          CHROMA_PORT=8000
          CHROMA_COLLECTION_NAME=documents
          EMBEDDING_MODEL=intfloat/multilingual-e5-large
          EMBEDDING_DEVICE=cpu
          BATCH_SIZE=32
          MAX_FILE_SIZE=10485760
          ALLOWED_EXTENSIONS=["pdf","txt","docx"]
          CHUNK_SIZE=512
          CHUNK_OVERLAP=128
          DEFAULT_TOP_K=5
          MAX_TOP_K=50
          UPLOAD_TEMP_DIR=./data/uploads
          ENABLE_ASYNC_PROCESSING=true
          EOF

      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          # 디렉토리 생성
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} \
            "mkdir -p ~/Backend/data/{uploads,chroma_data,huggingface_cache}"
          
          # 파일 전송
          scp -o StrictHostKeyChecking=no .env.production ${EC2_USER}@${EC2_HOST}:~/Backend/.env.local
          scp -o StrictHostKeyChecking=no docker-compose.yml ${EC2_USER}@${EC2_HOST}:~/Backend/
          scp -o StrictHostKeyChecking=no nginx.conf ${EC2_USER}@${EC2_HOST}:~/Backend/
          
          # 배포 실행
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} << 'ENDSSH'
            set -e
            cd ~/Backend
            
            echo "🔍 인프라 서비스 확인 중..."
            if ! docker-compose ps 2>/dev/null | grep -q "chromadb.*Up"; then
              echo "📦 인프라 서비스 시작..."
              docker-compose up -d chromadb nginx
              sleep 15
            fi
            
            echo "🐳 최신 이미지 다운로드..."
            docker-compose pull backend
            
            echo "🔨 백엔드 재시작..."
            docker-compose up -d --no-deps --force-recreate backend
            
            echo "⏳ 헬스 체크..."
            sleep 10
            
            for i in {1..10}; do
              if curl -sf http://localhost/health > /dev/null; then
                echo "✅ 배포 성공! (${i}0초)"
                docker-compose ps
                exit 0
              fi
              echo "대기 중... ($i/10)"
              sleep 10
            done
            
            echo "❌ 헬스 체크 실패"
            docker-compose logs --tail=50 backend
            exit 1
          ENDSSH