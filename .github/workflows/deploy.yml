name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          docker build -t ${DOCKERHUB_USERNAME}/krafton_jungle10_team4:latest .
          docker push ${DOCKERHUB_USERNAME}/krafton_jungle10_team4:latest
          echo "✅ Docker 이미지 빌드 및 푸시 완료"

      - name: Prepare deployment files
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          # .env.production 생성
          cat > .env.production << EOF
          APP_NAME="FastAPI RAG Backend"
          APP_VERSION="1.0.0"
          DEBUG=false
          LOG_LEVEL=info
          HOST=0.0.0.0
          PORT=8001
          WORKERS=4
          AWS_REGION=ap-northeast-2
          AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          S3_BUCKET_NAME=${S3_BUCKET_NAME}
          CHROMA_HOST=chromadb
          CHROMA_PORT=8000
          CHROMA_COLLECTION_NAME=documents
          EMBEDDING_MODEL=intfloat/multilingual-e5-large
          EMBEDDING_DEVICE=cpu
          BATCH_SIZE=32
          MAX_FILE_SIZE=10485760
          ALLOWED_EXTENSIONS=["pdf","txt","docx"]
          CHUNK_SIZE=512
          CHUNK_OVERLAP=128
          DEFAULT_TOP_K=5
          MAX_TOP_K=50
          UPLOAD_TEMP_DIR=./data/uploads
          ENABLE_ASYNC_PROCESSING=true
          EOF

      - name: Debug Secrets
        run: |
          echo "EC2_HOST length: ${#EC2_HOST}"
          echo "EC2_USER: $EC2_USER"
          echo "EC2_HOST first 5 chars: ${EC2_HOST:0:5}"
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}

      - name: Copy files to EC2
        run: |
          # 디렉토리 생성
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ~/Backend/data/{uploads,chroma_data,huggingface_cache}"

          # 파일 복사
          scp -o StrictHostKeyChecking=no .env.production ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Backend/.env.local
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Backend/
          scp -o StrictHostKeyChecking=no nginx.conf ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Backend/

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cd ~/Backend
            export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            docker-compose pull
            docker-compose down
            docker-compose up -d
            echo "✅ 배포 완료"
            docker-compose ps
          EOF

      - name: Verify Deployment
        run: |
          echo "⏳ 서비스 시작 대기 중..."
          sleep 30
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cd ~/Backend
            echo "📊 컨테이너 상태:"
            docker-compose ps
            echo ""
            echo "🏥 Health Check:"
            curl -f http://localhost/health || echo "❌ Health check failed"
          EOF
