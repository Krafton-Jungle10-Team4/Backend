name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/krafton_jungle10_team4:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/krafton_jungle10_team4:latest

      - name: Create .env.local locally
        run: |
          cat > .env.production << 'EOF'
          APP_NAME="FastAPI RAG Backend"
          APP_VERSION="1.0.0"
          DEBUG=false
          LOG_LEVEL=info
          HOST=0.0.0.0
          PORT=8001
          WORKERS=4
          AWS_REGION=ap-northeast-2
          CHROMA_HOST=chromadb
          CHROMA_PORT=8000
          CHROMA_COLLECTION_NAME=documents
          EMBEDDING_MODEL=intfloat/multilingual-e5-large
          EMBEDDING_DEVICE=cpu
          BATCH_SIZE=32
          MAX_FILE_SIZE=10485760
          ALLOWED_EXTENSIONS=["pdf","txt","docx"]
          CHUNK_SIZE=512
          CHUNK_OVERLAP=128
          DEFAULT_TOP_K=5
          MAX_TOP_K=50
          UPLOAD_TEMP_DIR=./data/uploads
          ENABLE_ASYNC_PROCESSING=true
          EOF
          
          # AWS secrets 추가
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env.production
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.production
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env.production

      - name: Prepare EC2 directories
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            mkdir -p ~/Backend/data/{uploads,chroma_data,huggingface_cache}
          EOF

      - name: Copy files to EC2
        run: |
          scp .env.production ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Backend/.env.local
          scp docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Backend/
          scp nginx.conf ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Backend/

      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd ~/Backend
            
            # 인프라 확인
            if ! docker-compose ps | grep -q "chromadb.*Up"; then
              docker-compose up -d chromadb nginx
              sleep 15
            fi
            
            # 백엔드 배포
            docker-compose pull backend
            docker-compose up -d --no-deps backend
            
            # 헬스 체크
            sleep 10
            for i in {1..12}; do
              if curl -f http://localhost/health > /dev/null 2>&1; then
                echo "✅ 배포 완료!"
                exit 0
              fi
              sleep 5
            done
            
            echo "❌ 헬스 체크 실패"
            docker-compose logs --tail=50 backend
            exit 1
          EOF