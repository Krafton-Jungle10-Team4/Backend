name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          docker build -t ${DOCKERHUB_USERNAME}/krafton_jungle10_team4:latest .
          docker push ${DOCKERHUB_USERNAME}/krafton_jungle10_team4:latest
          echo "‚úÖ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú ÏôÑÎ£å"

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          AWS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} "AWS_KEY_ID='${AWS_KEY_ID}' AWS_SECRET='${AWS_SECRET}' S3_BUCKET='${S3_BUCKET}' DOCKERHUB_USERNAME='${DOCKERHUB_USERNAME}' bash" << 'ENDSSH'
            set -e
            mkdir -p ~/Backend/data/{uploads,chroma_data,huggingface_cache}
            cd ~/Backend
            cat > .env.local << 'ENVEOF'
          APP_NAME="FastAPI RAG Backend"
          APP_VERSION="1.0.0"
          DEBUG=false
          LOG_LEVEL=info
          HOST=0.0.0.0
          PORT=8000
          WORKERS=4
          AWS_REGION=ap-northeast-2
          CHROMA_HOST=chromadb
          CHROMA_PORT=8000
          CHROMA_COLLECTION_NAME=documents
          EMBEDDING_MODEL=intfloat/multilingual-e5-large
          EMBEDDING_DEVICE=cpu
          BATCH_SIZE=32
          MAX_FILE_SIZE=10485760
          ALLOWED_EXTENSIONS=["pdf","txt","docx"]
          CHUNK_SIZE=512
          CHUNK_OVERLAP=128
          DEFAULT_TOP_K=5
          MAX_TOP_K=50
          UPLOAD_TEMP_DIR=./data/uploads
          ENABLE_ASYNC_PROCESSING=true
          ENVEOF
            echo "AWS_ACCESS_KEY_ID=${AWS_KEY_ID}" >> .env.local
            echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET}" >> .env.local
            echo "S3_BUCKET_NAME=${S3_BUCKET}" >> .env.local
            cat > docker-compose.yml << 'COMPOSEEOF'
          version: '3.8'
          services:
            chromadb:
              image: chromadb/chroma:latest
              container_name: chromadb
              volumes:
                - ./data/chroma_data:/chroma/chroma
              environment:
                - IS_PERSISTENT=TRUE
                - ANONYMIZED_TELEMETRY=FALSE
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
                interval: 30s
                timeout: 10s
                retries: 3
              networks:
                - rag-network
            backend:
              image: ${DOCKERHUB_USERNAME}/krafton_jungle10_team4:latest
              container_name: fastapi_backend
              volumes:
                - ./data/uploads:/app/data/uploads
                - ./data/huggingface_cache:/root/.cache/huggingface
              environment:
                - CHROMA_HOST=chromadb
                - CHROMA_PORT=8000
              env_file:
                - .env.local
              depends_on:
                chromadb:
                  condition: service_healthy
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s
              networks:
                - rag-network
            nginx:
              image: nginx:alpine
              container_name: nginx_proxy
              ports:
                - "80:80"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf:ro
              depends_on:
                - backend
                - chromadb
              restart: unless-stopped
              networks:
                - rag-network
          networks:
            rag-network:
              driver: bridge
          COMPOSEEOF
            cat > nginx.conf << 'NGINXEOF'
          events {
              worker_connections 1024;
          }
          http {
              upstream backend {
                  server backend:8000;
              }
              server {
                  listen 80;
                  server_name _;
                  client_max_body_size 20M;
                  proxy_connect_timeout 300;
                  proxy_send_timeout 300;
                  proxy_read_timeout 300;
                  send_timeout 300;
                  location / {
                      proxy_pass http://backend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
                  location /health {
                      proxy_pass http://backend/health;
                      access_log off;
                  }
              }
          }
          NGINXEOF
            export DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
            docker-compose pull
            docker-compose down
            docker-compose up -d
            echo "‚úÖ Î∞∞Ìè¨ ÏôÑÎ£å"
            docker-compose ps
          ENDSSH

      - name: Verify Deployment
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "‚è≥ ÏÑúÎπÑÏä§ ÏãúÏûë ÎåÄÍ∏∞ Ï§ë..."
          sleep 30
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} bash << 'ENDSSH'
            cd ~/Backend
            echo "üìä Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú:"
            docker-compose ps
            echo ""
            echo "üè• Health Check:"
            curl -f http://localhost/health || echo "‚ùå Health check failed"
          ENDSSH
